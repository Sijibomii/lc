
def pascal_triangle(numRows):
    ret = []
    if numRows < 1:
        return []
    ret.append([1])

    for row in range(1, numRows):
        ans = []
        ans.append(1)

        if len(ans) == row:
            # for row 2
            ans.append(1)
            ret.append(ans)
        else:
            curr = 1
            while len(ans) < row:
                to_app = ret[-1][curr-1] + ret[-1][curr]
                ans.append(to_app)
                curr = curr + 1
            else:
                ans.append(1)
                ret.append(ans)
    return ret
#explanation: Any row can be constructed using the offset sum of the previous row.
"""
    1 3 3 1 0 
 +  0 1 3 3 1
 =  1 4 6 4 1

"""
def pascal_triangle(numRows):
    res = [[1]]
    for i in range(1, numRows):
        #The map() function executes a specified function for each item in an iterable. the func in this cal takes in x, y
        res += [map(lambda x, y: x+y, res[-1] + [0], [0] + res[-1])]
    return res[:numRows]